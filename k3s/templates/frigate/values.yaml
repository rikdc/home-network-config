---
# Frigate Template Configuration
# This is a sanitized template - replace placeholders with your actual values

# App template configuration
app-template:
  namespaceOverride: "{{ .Values.namespace }}"
  
  defaultPodOptions:
    securityContext:
      runAsNonRoot: true
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      fsGroupChangePolicy: "OnRootMismatch"
    nodeSelector:
      kubernetes.io/arch: amd64

  controllers:
    main:
      strategy: Recreate
      containers:
        main:
          image:
            repository: ghcr.io/blakeblackshear/frigate
            tag: "{{ .Values.image.tag }}"
            pullPolicy: IfNotPresent
          env:
            LIBCEC_ENABLED: "false"
            FRIGATE_MQTT_USER:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.secretName }}"
                  key: mqtt-user
            FRIGATE_MQTT_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.secretName }}"
                  key: mqtt-password
            FRIGATE_RTSP_PASSWORD:
              valueFrom:
                secretKeyRef:
                  name: "{{ .Values.secretName }}"
                  key: rtsp-password
          ports:
            - name: http
              containerPort: 5000
            - name: rtsp
              containerPort: 8554
            - name: rtmp
              containerPort: 1935
            - name: go2rtc-admin
              containerPort: 1984
            - name: webrtc-tcp
              containerPort: 8555
              protocol: TCP
            - name: webrtc-udp
              containerPort: 8555
              protocol: UDP
          resources:
            requests:
              cpu: "{{ .Values.resources.requests.cpu }}"
              memory: "{{ .Values.resources.requests.memory }}"
            limits:
              memory: "{{ .Values.resources.limits.memory }}"
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            capabilities:
              add:
                - SYS_ADMIN
                - NET_ADMIN
          probes:
            liveness:
              enabled: true
              type: HTTP
              path: /
              port: 5000
            readiness:
              enabled: true
              type: HTTP
              path: /
              port: 5000
            startup:
              enabled: true
              type: HTTP
              path: /
              port: 5000

  configMaps:
    frigate-config:
      enabled: true
      data:
        config.yml: |
          mqtt:
            enabled: True
            host: "{{ .Values.mqtt.host }}"
            port: {{ .Values.mqtt.port }}
            topic_prefix: frigate
            client_id: frigate
            user: "{FRIGATE_MQTT_USER}"
            password: "{FRIGATE_MQTT_PASSWORD}"
            tls_ca_certs: /etc/ssl/certs/ca-certificates.crt
            
          ffmpeg:
            input_args: -avoid_negative_ts make_zero -fflags +genpts+discardcorrupt -flags low_delay -strict experimental -analyzeduration 1000M -probesize 1000M
            output_args:
              record: -f segment -segment_time 10 -segment_format mp4 -reset_timestamps 1 -strftime 1 -c copy

          detectors:
            coral:
              type: edgetpu
              device: "{{ .Values.coral.device }}"

          objects:
            track:
              - person
            filters:
              person:
                min_area: 5000
                max_area: 100000

          birdseye:
            enabled: True
            mode: motion

          go2rtc:
            streams:
              # Replace with your actual camera streams
              camera1:
                - "rtsp://admin:{FRIGATE_RTSP_PASSWORD}@camera1-ip:554/stream1"
              camera1_sub:
                - "rtsp://admin:{FRIGATE_RTSP_PASSWORD}@camera1-ip:554/stream2"

          logger:
            default: info

          detect:
            enabled: True
            width: 640
            height: 360

          record:
            enabled: True

          snapshots:
            enabled: True

          cameras:
            # Replace with your actual cameras
            camera1:
              ffmpeg:
                inputs:
                  - path: "rtsp://127.0.0.1:8554/camera1"
                    input_args: preset-rtsp-restream
                    roles:
                      - record
                  - path: "rtsp://127.0.0.1:8554/camera1_sub"
                    input_args: preset-rtsp-restream
                    roles:
                      - detect
              detect:
                enabled: True
                width: 640
                height: 360
                stationary:
                  interval: 10

  service:
    main:
      enabled: true
      type: ClusterIP
      ports:
        http:
          port: 5000
          protocol: TCP
        rtsp:
          port: 8554
          protocol: TCP
        rtmp:
          port: 1935
          protocol: TCP
        go2rtc-admin:
          port: 1984
          protocol: TCP
        webrtc-tcp:
          port: 8555
          protocol: TCP
        webrtc-udp:
          port: 8555
          protocol: UDP

  ingress:
    main:
      enabled: "{{ .Values.ingress.enabled }}"
      hosts:
        - host: "{{ .Values.ingress.host }}"
          paths:
            - path: /
              service:
                identifier: main
                port: 5000
      tls:
        - hosts: 
            - "{{ .Values.ingress.host }}"
          secretName: "{{ .Values.ingress.tlsSecret }}"

  persistence:
    config-tpl:
      enabled: true
      type: configMap
      identifier: frigate-config
      defaultMode: 292
      globalMounts:
        - path: /config/config.yml
          subPath: config.yml
          readOnly: true

    data:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: "{{ .Values.persistence.data.size }}"
      storageClass: "{{ .Values.persistence.data.storageClass }}"
      globalMounts:
        - path: /data

    media:
      enabled: true
      type: persistentVolumeClaim
      accessMode: ReadWriteOnce
      size: "{{ .Values.persistence.media.size }}"
      storageClass: "{{ .Values.persistence.media.storageClass }}"
      globalMounts:
        - path: /media

    dshm:
      enabled: true
      type: emptyDir
      medium: Memory
      sizeLimit: 1Gi
      globalMounts:
        - path: /dev/shm

    tmp:
      enabled: true
      type: emptyDir
      medium: Memory
      sizeLimit: 1Gi
      globalMounts:
        - path: /tmp

    apex0:
      enabled: "{{ .Values.persistence.apex.enabled }}"
      type: hostPath
      hostPath: /dev/apex_0
      hostPathType: CharDevice
      globalMounts:
        - path: /dev/apex_0
          readOnly: false

# Default values - customize for your environment
namespace: "tools"
secretName: "frigate-secrets"

image:
  tag: "0.16.1"

mqtt:
  host: "mqtt.home.local"
  port: 1883

coral:
  device: "usb"

resources:
  requests:
    cpu: "100m"
    memory: "256Mi"
  limits:
    memory: "2Gi"

ingress:
  enabled: true
  host: "frigate.home.local"
  tlsSecret: "frigate-tls"

persistence:
  data:
    size: "20Gi"
    storageClass: "local-path"
  media:
    size: "500Gi"
    storageClass: "local-path"
  apex:
    enabled: true