---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "docmost.fullname" . }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "docmost.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "docmost.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "docmost.selectorLabels" . | nindent 8 }}
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            {{- range .Values.env }}
            - name: {{ .name }}
              value: {{ .value | quote }}
            {{- end }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalSecrets.target.name }}
                  key: DATABASE_URL
            - name: APP_SECRET
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalSecrets.target.name }}
                  key: APP_SECRET
            - name: NFS_SERVER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalSecrets.target.name }}
                  key: NFS_SERVER
            - name: NFS_PATH
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.externalSecrets.target.name }}
                  key: NFS_PATH
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /app/data
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            timeoutSeconds: 3
            periodSeconds: 5
        {{- if .Values.redis.enabled }}
        - name: redis
          image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          resources:
            {{- toYaml .Values.redis.resources | nindent 12 }}
          volumeMounts:
            - name: redis-data
              mountPath: /data
          livenessProbe:
            tcpSocket:
              port: redis
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: redis
            initialDelaySeconds: 5
            periodSeconds: 5
        {{- end }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.storage.persistence.pvcName | default (printf "%s-pvc" .Release.Name) }}
        {{- if .Values.redis.enabled }}
        - name: redis-data
          emptyDir: {}
        {{- end }}
