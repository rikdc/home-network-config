---
- name: Setup | Install required system packages
  become: true
  ansible.builtin.apt:
    pkg:
      - mysql-client
      - libmysqlclient-dev
      - python3-mysqldb
      - ca-certificates
      - curl
      - software-properties-common
      - python3-pip
      - virtualenv
      - python3-setuptools
    state: latest
    update_cache: true

- name: Configure | Ensure mysql dirs exist
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    recurse: true
    mode: 0765 # 0645; todo: figure the appropriate permissions. Those from the docs still generate access denied errors.
  with_items:
    - "{{ mysql_backups_dir }}"
    - "{{ mysql_conf_dir }}"
    - "{{ mysql_lib_dir }}"

- name: Configure | Copy mysql config files
  ansible.builtin.template:
    src: "templates/{{ item }}.j2"
    dest: "{{ mysql_conf_dir }}/{{ item }}"
    force: true
    mode: 0640
  with_items:
    - "my.cnf"

- name: Configure | Create docker network
  community.docker.docker_network:
    name: "{{ mysql_network }}"
    state: present

- name: Configure | Start MySQL Container
  community.docker.docker_container:
    env:
      MYSQL_ROOT_PASSWORD: "{{ mysql_root_password }}"
    image: mysql:5.7
    labels:
      traefik.enable: "false"
    name: "{{ mysql_container_name }}"
    networks:
      - name: "{{ mysql_network }}"
    ports:
      - "{{ mysql_port }}:3306"
    pull: true
    recreate: true
    restart_policy: always
    state: "{{ mysql_state }}"
    volumes:
      - "{{ mysql_backups_dir }}:/var/backups/mysql"
      - "{{ mysql_conf_dir }}:/etc/mysql/conf.d"
      - "{{ mysql_lib_dir }}:/var/lib/mysql"
  register: _mysql_docker

- name: Container | Wait for MySQL container to respond
  ansible.builtin.wait_for:
    host: 127.0.0.1
    port: 3306
    search_regex: "(mysql_native_password|caching_sha2_password)"

- name: MySQL | Secure | Remove all anonymous user accounts
  community.mysql.mysql_user:
    name: ''
    host: 127.0.0.1
    login_host: 127.0.0.1
    login_user: root
    login_password: "{{ mysql_root_password }}"
    state: absent

- name: MySQL | Setup Users
  community.mysql.mysql_user:
    login_host: 127.0.0.1
    login_user: root
    login_password: "{{ mysql_root_password }}"
    name: "{{ item.username }}"
    password: "{{ item.password }}"
    host: "{{ item.host }}"
    priv: '*.*:ALL'
    state: present
  loop: "{{ mysql_users.regular }}"

- name: Setup | Configure Backup system
  ansible.builtin.include_tasks: backup.yml
