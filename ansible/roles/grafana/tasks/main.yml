---
- name: Set config_different variable
  ansible.builtin.set_fact:
    config_different: false

- name: Run command to check if container is running
  ansible.builtin.command: docker inspect --format='{{ '{{' }} .State.Running {{ '}}' }}' grafana
  register: result
  changed_when: false

- name: Set container_running variable
  ansible.builtin.set_fact:
    container_running: "{{ result.stdout == 'true' }}"

- name: Create a volume
  community.docker.docker_volume:
    name: grafana

- name: Create a volume
  community.docker.docker_volume:
    name: grafana-config

- name: Start a container
  community.docker.docker_container:
    name: container
    image: alpine
    detach: false
    volumes:
      - grafana-config:/config

- name: Copy over the config
  ansible.builtin.copy:
    src: "grafana.ini"
    dest: "/tmp/grafana.ini"
    mode: 0644

- name: Run command to compare files in Docker container
  ansible.builtin.command: docker exec grafana  sh -c "diff /etc/grafana/grafana.ini <(cat /tmp/grafana.ini)"
  register: result
  changed_when: false
  when: container_running

- name: Set config_different variable
  ansible.builtin.set_fact:
    config_different: "{{ result.rc != 0 }}"
  when: container_running

- name: Copy into the container
  ansible.builtin.command: docker cp /tmp/grafana.ini container:/config/
  register: grafana_config
  when: config_different

- name: Remove the hanging container
  community.docker.docker_container:
    name: container
    image: alpine
    state: absent

- name: Grafana container
  community.docker.docker_container:
    name: grafana
    image: "grafana/grafana"
    restart_policy: unless-stopped
    container_default_behavior: no_defaults
    log_driver: "json-file"
    log_options: "max-size=10m"
    volumes:
      - "grafana:/var/lib/grafana"
      - "grafana-config:/etc/grafana"
    labels:
      docker-volume-backup.stop-during-backup: "grafana"
    network_mode: default
    networks:
      - name: prod
    ports:
      - "3000:3000/tcp"

